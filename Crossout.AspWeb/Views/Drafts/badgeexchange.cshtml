@{
    Layout = "_Layout";
}

@using Crossout.AspWeb.Models.Drafts.BadgeExchange
@model BadgeExchangeModel

<partial name="header" model="@Model" />

<div class="half-hd-container px-3">
    <div class="card my-1">
        <h4 class="card-title m-2"><loc model="Model.Localizations" category="badgeexchange" name="title">Badge Exchange</loc></h4>

        @if (!Model.IsUpToDate())
        {
            <div class="alert alert-warning m-2" role="alert">
                <strong><loc model="Model.Localizations" category="shared" name="message.warning">Warning</loc>:</strong> <loc model="Model.Localizations" category="badgeexchange" name="message.notactiveanymore">Deals marked as active might not be active anymore!</loc>
            </div>
        }

        <div class="custom-control custom-switch m-2">
            <input type="checkbox" class="custom-control-input" id="activeOnlySwitch" checked>
            <label class="custom-control-label" for="activeOnlySwitch"><loc model="Model.Localizations" category="badgeexchange" name="label.activeonlyswitch">Only show currently active deals</loc></label>
        </div>

        <div>
            <table class="table table-borderless table-hover dt-responsive" id="BadgeExchangeTable">
                <thead>
                    <tr>
                        <th data-priority="1">
                            <loc model="Model.Localizations" category="shared" name="tablehead.item">Item</loc>
                        </th>
                        <th data-priority="2">
                            <loc model="Model.Localizations" category="badgeexchange" name="tablehead.active">Active</loc>
                        </th>
                        <th class="never">
                            Active Flag
                        </th>
                        <th data-priority="2">
                            <loc model="Model.Localizations" category="shared" name="tablehead.sellprice">Sell Price</loc>
                        </th>
                        <th data-priority="2">
                            <loc model="Model.Localizations" category="shared" name="tablehead.amount">Amount</loc>
                        </th>
                        <th data-priority="2">
                            <loc model="Model.Localizations" category="badgeexchange" name="tablehead.badgecost">Badge Cost</loc>
                        </th>
                        <th data-priority="2">
                            <loc model="Model.Localizations" category="shared" name="tablehead.profit">Profit</loc>
                        </th>
                        <th data-priority="1">
                            <loc model="Model.Localizations" category="badgeexchange" name="tablehead.profitperbadge">Profit / Badge</loc>
                        </th>
                        <th class="none">
                            <loc model="Model.Localizations" category="badgeexchange" name="tablehead.amount">Last Begin Active</loc>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var deal in Model.BadgeExchangeDeals)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div>
                                        @if (deal.RewardItem.ImageExists) //(RootPathHelper.ImageExists(Url,Model.Image))
                                        {
                                            <a href="~/item/@deal.RewardItem.Id">
                                                <img class="pull-left item-image-med lazy" style="margin-right: 8px;" src="~/icons/Spinner-1s-64px.svg" data-src="/img/items/@deal.RewardItem.Image" />
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="~/item/@deal.RewardItem.Id">
                                                <img class="pull-left item-image-med" style="margin-right: 8px;" src="~/img/NoImage.png" />
                                            </a>
                                        }
                                    </div>
                                    <a href="~/item/@deal.RewardItem.Id">@deal.RewardItem.AvailableName</a>
                                </div>
                            </td>
                            <td>
                                @if (deal.Active)
                                {
                                    <svg class="feather-greencheck"><use xlink:href="/icons/feather-sprite.svg#check" /></svg>
                                }
                                else
                                {
                                    <svg class="feather-redx"><use xlink:href="/icons/feather-sprite.svg#x" /></svg>
                                }
                            </td>
                            <td>
                                @deal.Active
                            </td>
                            <td>
                                @deal.RewardItem.FormatSellPrice <img height="14" src="/img/Coin.png" />
                            </td>
                            <td>
                                @deal.RewardAmount
                            </td>
                            <td>
                                @deal.BadgeCost
                            </td>
                            <td>
                                @deal.FormatProfit <img height="14" src="/img/Coin.png" />
                            </td>
                            <td>
                                @deal.FormatProfitPerBadge <img height="14" src="/img/Coin.png" />
                            </td>
                            <td>
                                @deal.FormatLastBeginActive
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    var table = {};
    $(document).ready(function () {
        table = $('#BadgeExchangeTable').DataTable({
            dom: '<tr>',
            columnDefs: [
                { 'orderable': false, 'targets': 1 },
                {
                    'targets': 8,
                    'render': function (data, type, row, meta) {
                        var adjustedTimestamp = getAdjustedTimestamp(data);
                        return '<div class="item-timestamp ' + olderThan(data, 10080) + '">' + adjustedTimestamp + '</div>';
                    }
                }
            ],
            order: [[7, 'desc']],
            searching: true,
            lengthChange: false,
            paging: false,
            info: false,
            autoWidth: false,
            responsive: {
                details: {
                    type: 'inline',
                    renderer: function (api, rowIdx, columns) {
                        var data = $.map(columns, function (col, i) {
                            return col.hidden ?
                                '<div class="d-inline-flex flex-column card p-1 px-2 m-2" data-dt-row="' + col.rowIndex + '" data-dt-column="' + col.columnIndex + '">' +
                                '<div class="font-weight-bold">' + col.title + '' + '</div> ' +
                                '<div>' + col.data + '</div>' +
                                '</div>' :
                                '';
                        }).join('');

                        return data ?
                            $('<div/>').append(data) :
                            false;
                    }
                }
            }
        });

        adjustTimeStamp();
        table.column(2).search('True').draw();
    });

    $('#activeOnlySwitch').change(function () {
        if (this.checked)
            table.column(2).search('True').draw();
        else
            table.column(2).search('').draw();
    });

    function olderThan(timestamp, minutes) {
        return moment.utc().subtract(minutes, 'minutes') > moment.utc(timestamp, 'YYYY-MM-DD HH:mm:ss') ? 'timestamp-older-than-' + minutes : '';
    }
</script>